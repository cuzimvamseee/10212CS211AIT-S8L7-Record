import numpy as np
d = np.array([
    [0 10, 12, 11, 14],
    [10, 0, 13, 15, 8],
    [12, 13, 0, 9, 14],
    [11, 15, 9, 0, 16],
    [14, 8, 14, 16, 0]
])
iteration = 100
n_ants = 5
n_cities = 5
evaporation = 0.5
alpha = 1
beta = 2
visibility = 1 / d
np.fill_diagonal(visibility, 0)
pheromone = 0.1 * np.ones((n_cities, n_cities))
routes = np.zeros((n_ants, n_cities + 1), dtype=int)
best_route = None
best_cost = float('inf')
for ite in range(iteration):
    for ant in range(n_ants):
        visited = [0]
        routes[ant, 0] = 0
        for step in range(1, n_cities):
            current_city = visited[-1]
            probs = np.zeros(n_cities)
            for city in range(n_cities):
                if city not in visited:
                    pher = pheromone[current_city, city] ** alpha
                    vis = visibility[current_city, city] ** beta
                    probs[city] = pher * vis
            if probs.sum() == 0:
                candidates = list(set(range(n_cities)) - set(visited))
                next_city = np.random.choice(candidates)
            else:
                probs /= probs.sum()
                next_city = np.random.choice(range(n_cities), p=probs)

            visited.append(next_city)
            routes[ant, step] = next_city
        routes[ant, n_cities] = 0
    costs = np.zeros(n_ants)
    for ant in range(n_ants):
        cost = 0
        for city_idx in range(n_cities):
            from_city = routes[ant, city_idx]
            to_city = routes[ant, city_idx + 1]
            cost += d[from_city, to_city]
        costs[ant] = cost
    min_cost_idx = np.argmin(costs)
    if costs[min_cost_idx] < best_cost:
        best_cost = costs[min_cost_idx]
        best_route = routes[min_cost_idx].copy()
    pheromone *= (1 - evaporation)
    for ant in range(n_ants):
        for city_idx in range(n_cities):
            from_city = routes[ant, city_idx]
            to_city = routes[ant, city_idx + 1]
            pheromone[from_city, to_city] += 1 / costs[ant]
            pheromone[to_city, from_city] += 1 / costs[ant]

print("Routes of all ants at the end of last iteration:")
print(routes)
print()
print("Best path found:", best_route)
print("Cost of best path:", int(best_cost))
